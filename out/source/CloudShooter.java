/* autogenerated by Processing revision 1277 on 2021-12-17 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import org.gamecontrolplus.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class CloudShooter extends PApplet {

// Importar tudo da library GCP


//inicializar objetos
ControlIO controlIO; //usar controlador
Menu m;
CloudsGen c1;
CloudsGen c2;
CloudsGen c3;
Player p1;
Bullets b1;
Enemy e1;
int score = 0;

//codigo apenas corrido 1x (inicio do programa)
 public void setup() {  

  /* size commented out by preprocessor */; //utilizado para por o canvas em full screen

  rectMode(CENTER); //função usada para centrar os rectângulos

  frameRate(25); //especificar framerate a usar

  //menu start
  m = new Menu(width/2, height/2);
  //nuvem 1
  c1 = new CloudsGen("/assets/images/cloud1.png", 100, random(height));
  //nuvem 2
  c2 = new CloudsGen("/assets/images/cloud2.png", 200, random(height));
  //nuvem 3
  c3 = new CloudsGen("/assets/images/cloud3.png", 300, random(height));
  //player 1
  p1 = new Player("/assets/images/f16.png", 0, 0, 20);
  //bullet 1
  b1 = new Bullets("/assets/images/bullet.png", -650, -650/2, 100);
  //enemy 1
  e1 = new Enemy("/assets/images/ovni.png", (width - 300), (height - 300), 150, 5, 100);

}


//quero adicionar um background que vai mudando a HUE de modo a ser dia/noite.

//desenhar os elementos do programa no ecra
 public void draw() {

//menu calls
  m.start();

}

//tenho que validar se a bala atinge o objeto dentro do draw
 public void keyPressed() {
  //falta por a bala a mover-se.
  if (key == ' ') {
    p1.shoot();
  }

  if(key == 's'|| key == 'S') p1.moveDown = true;
  if(key == 'w'|| key == 'W') p1.moveUp = true;
  if(key == 'a'|| key == 'A') p1.moveLeft = true;
  if(key == 'd'|| key == 'D') p1.moveRight = true;

}

 public void keyReleased() {

  if(key == 's'|| key == 'S') p1.moveDown = false;
  if(key == 'w'|| key == 'W') p1.moveUp = false;
  if(key == 'a'|| key == 'A') p1.moveLeft = false;
  if(key == 'd'|| key == 'D') p1.moveRight = false;

}

//codigo importado do exemplo do professor em ordem a obter movimento suave
/*void keyPressed() {
  if(key == 'j' || key == 'J') plane.left = true;
  if(key == 'l' || key == 'L') plane.right = true;
  if(key == 'i' || key == 'I') plane.up = true;
  if(key == 'k' || key == 'K') plane.down = true;
}
void keyReleased() {
  if(key == 'j' || key == 'J') plane.left = false;
  if(key == 'l' || key == 'L') plane.right = false;
  if(key == 'i' || key == 'I') plane.up = false;
  if(key == 'k' || key == 'K') plane.down = false;
}
*/

//acresventar pontuacao na tabela
 public void score() {
  if (b1.enemycheck()) {
    score++;
    println("hit" + score);
  }
}

//tabela de pontuacao
 public void highscore() {

}

//no more lifelines calls this.
 public void gameOver() {

}

//going through all the lifelines and leves without dying, calls this.
 public void gameWon() {

}

//if the player loses the level this gets called and he loses a lifeline
 public void gameLost() {
  
}

 public void mousePressed() {
  if(m.state == true) m.state = false;
}
class Bullets {

  //propriedades
  PImage bullet;
  float posX, posY, tam;

  //construtor
  Bullets(String name, float x, float y, float t) {
    bullet = loadImage(name);
    posX = x;
    posY = y;
    tam = t;
  }

  //desenhar as balas no ecra
   public void drawme() {
    //redimensionar a imagem da bala para o tamanho pretendido
    bullet.resize(PApplet.parseInt(tam), 25);
    //desenhar imagem da bala no canvas
    image(bullet, posX, posY);
  }

  //mover a bullet a partir da posicao do player
   public void moveme() {
    //Para a bala precorrer o Y desde o ponto de spawn ate ao final do Y do canvas
    if (posY < width-tam) {
      posX += tam;
    }
  }
  //verificar se a posicao X e Y do enimigo, corresponde a mesma posicao X e Y da bala, em ordem a contar como HIT
   public boolean enemycheck(){
    if (dist(b1.posX+b1.tam/2, b1.posY+b1.tam/2, e1.posX+e1.tam/2, e1.posY+e1.tam/2) < tam) {
      return true;
    }
    return false;
  }
}
//creating the class for cloud generating
class CloudsGen {

//properties
  PImage img; //declaring varible to save images
  float posX, posY; //positions X and Y on canvas

//constructor
  CloudsGen(String nome, float x, float y) {
    img = loadImage(nome); //inicializing the variable, with the value passed through the CloudShooter.pde values.
    posX = x;
    posY = y;
  }

//method used to draw the objects on the canvas
   public void drawme() {
    image(img, posX, posY); //function image to draw the image with three specified parameters inside
  }

//method used to make the object run through X and randomly change height
   public void move() {
    if (posX > -img.width) {
      posX -= random(2, 25); // acrescentar codigo noise
    } else {
      posX = width;
      posY = random(height);
    }
  }
}
//para a catarina comentar o codigo acima
class Enemy {

  //propriedades
  float dp = 37;
  float trand = 5;
  float tsmoothed;
  PImage img;
  float posX, posY, vel, damage, tam;
  int health;
  float mediaY = height/2;
  //constructor
  Enemy(String nome, float x, float y, int t, float v, float d) {

    img = loadImage(nome);
    posX = width-tam;
    posY = 0;
    tam = t;
    vel = v;
    damage = d;
    health = 100;

  }

   public void drawme() {

    img.resize(PApplet.parseInt(tam), PApplet.parseInt(tam)); //redimensiona a imagem
    image(img, posX, posY);

  }

//necessito de fazer com que o enimigo se multiplique a cada posY completo 

//fazer enimigo andar pelo canvas variando velocidade horizontal e posicao vertical aleatoria
   public void move() {
  
    //tam = randomGaussian();
    //tam = tam * dp + mediaY; 
    tsmoothed = noise(trand); //posicao vertical dinamica, dificuldade 0
    tsmoothed = map(tsmoothed, 0, 1, tam, width-tam);
    posY = tsmoothed;

    if (posX < 0) {
      delay(250);
      posX = width + tam;
     
    } else {
      posX -= vel;
      trand += 0.05f;
      
    }

  }

/* placeholder para verificar se foi atingiho pela bala*/
  /* placeholder code 
  void healthcheck() {

    if (health <= 0) {
      enemy.hide();
    }

  }
  */
}
class Menu{
//para catarina comentar o codigo abaixo


float posX, posY;
boolean state;

 
    Menu(float x, float y) {

        posX = x;
        posY = y;
        state = true;

    }


     public void start() {

        if (state == true) {

            fill(140, 60 ,05);
            rect(posX-100, posY, 100, 100);
            rect(posX+100, posY, 100, 100);

        } else {
            //claudio fez esta parte do codigo
            background(0, 80, 255); //background azul temporario
            c1.drawme(); //desenhar nuvem1
            c2.drawme(); //desenhar nuvem2
            c3.drawme(); //desenhar nuvem3
            c1.move(); //mover a nuvem1
            c2.move(); //mover a nuvem2
            c3.move(); //mover a nuvem3
            p1.drawme(); //desenhar o player1
            p1.moveme(); //mover o player1
            b1.drawme(); //desenhar as balas
            b1.moveme(); //mover as balas
            e1.drawme(); //desenhar o enimigo
            e1.move(); //Bmover o enimo
            //  e1.healthcheck(); //verificar se o enimigo morreu ou nao
            score();
            b1.enemycheck(); //verificar se a bala atingiu o enimigo 

        }

    }

}

class Player {
  //Properties
  float altura, largura; //altura e largura da imagem
  PImage img; //sprite normal
  //PImage img2; //sprite while moving up
  //PImage img3; //sprite while moving down
  float posX, posY, tam;
  boolean moveUp, moveDown, moveLeft, moveRight; //booleanas para controlar o movimento do player

  //Constructor
  Player(String n, float x, float y, float t) {
    img = loadImage(n);
    //img2 = loadimage(n2);
    //img3 = loadimage(n3);
    posX = x;
    posY = y;
    tam = t;
    largura = img.width;
    altura = img.height;
    moveDown  = false;
    moveLeft  = false;
    moveRight = false;
    moveUp = false;  
  }

  //spawn da imagem mediante parametros indicados
   public void drawme() {
    img.resize(650, 350);
    image(img, posX, posY);
  }

  //tenho que adicionar movimento com variaveis boleanas para ser smooth

  //damage radius
   public void damage() {
  }

   public void shoot () {
    b1.posX = posX+largura/2;
    b1.posY = posY+altura/3.5f;
    b1.moveme();
  }

  //validar posicao e incremento da mesma caso tecla seja pressionada
   public void moveme(){

    if (moveLeft) posX -= tam;  // "if(left == true)" igual a "if(left)"
    else if (moveRight) posX += tam;
    else if (moveUp) posY -= tam;
    else if (moveDown) posY += tam;

  }
  
  //codigo importado do exemplo do professor em ordem a obter movimento suave
  /*  void show() {
    if (die) {
      posY += 3*speed;   
    } else {
      if (left) posX -= speed;  // "if(left == true)" igual a "if(left)"
      else if (right) posX += speed;
      else if (up) posY -= speed;
      else if (down) posY += speed;
    }
    image(img, posX, posY);
  }
  */

}


  public void settings() { fullScreen(P2D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "CloudShooter" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
